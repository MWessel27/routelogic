],
travelMode: 'DRIVING',
unitSystem: google.maps.UnitSystem.IMPERIAL,
avoidHighways: false,
avoidTolls: false
}, function(response, status) {
if (status !== 'OK') {
  alert('Error was: ' + status);
} else {
  var originList = response.originAddresses;
  var destinationList = response.destinationAddresses;
  var outputDiv = document.getElementById('output');
  outputDiv.innerHTML = '';
  deleteMarkers(markersArray);

  var showGeocodedAddressOnMap = function(asDestination) {
    var icon = asDestination ? destinationIcon : originIcon;
    return function(results, status) {
      if (status === 'OK') {
        map.fitBounds(bounds.extend(results[0].geometry.location));
        markersArray.push(new google.maps.Marker({
          map: map,
          position: results[0].geometry.location,
          icon: icon
        }));
      } //else {
        //alert('Geocode was not successful due to: ' + status);
      //}
    };
  };

  outputDiv.innerHTML +='<table>' + '<tr>'+'<th>Address</th>'+'<th>Distance</th>'+'<th>Time</th>'+'</tr>';
  for (var i = 0; i < originList.length; i++) {
    var addressList = {
      addresses: []
    };

    var results = response.rows[i].elements;
    for (var j = 0; j < results.length; j++) {
      var item = results[j];
      addressList.addresses.push({
        "address": destinationList[j],
        "distance": item.distance.text,
        "duration": item.duration.text
      });
    }

    geocoder.geocode({'address': originList[i]},
        showGeocodedAddressOnMap(false));

    var sorted = addressList.addresses.sort(function(a, b) {
      var tempDistA = a.distance[0] + a.distance[1] + a.distance[2] + a.distance[3];
      var tempDistB = b.distance[0] + b.distance[1] + b.distance[2] + b.distance[3];
      return tempDistA - tempDistB;
    });
    for (var j = 0; j < sorted.length; j++) {
      geocoder.geocode({'address': destinationList[j]},
          showGeocodedAddressOnMap(true));
      outputDiv.innerHTML += '<table><tr>' + '<td>' + sorted[j].address + '</td>'+ '<td>' + sorted[j].distance + '</td>'+ '<td>' + sorted[j].duration + '</td>' + '</tr>';
    }
  }
  //outputDiv.innerHTML +='</table>';
}
});
}

function deleteMarkers(markersArray) {
for (var i = 0; i < markersArray.length; i++) {
markersArray[i].setMap(null);
}
markersArray = [];
}
</script>
<script async defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAESVZkEV6W30DcS-QlzpIVkluBPNv3DXs&callback=initMap">
</script>
</body>
</html>
